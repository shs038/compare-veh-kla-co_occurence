import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import scipy
from scipy import stats
%matplotlib inline
#read in data
motif_position_df = pd.read_csv('/home/jtao/for_shengnan/motif_start_frame_C57BL6J.tsv', sep='\t')
motif_position_df.index = motif_position_df['ID'].values
del motif_position_df['ID']
#vehicle position
veh_df=motif_position_df[motif_position_df['Factors'].str.contains('c57bl6_atac_veh')]
del veh_df['Factors']
del veh_df['chr']
#vehicle position
veh_df=motif_position_df[motif_position_df['Factors'].str.contains('c57bl6_atac_veh')]
del veh_df['Factors']
del veh_df['chr']
#seperate data into veh only, kla only, and unchanged
veh_indices=motif_position_df[motif_position_df['Factors'].str.contains('atac_veh')].index.values
kla_incices=motif_position_df[motif_position_df['Factors'].str.contains('atac_kla')].index.values
veh_indices=set(veh_indices)
kla_incices=set(kla_incices)
veh_only=veh_indices-kla_incices
kla_only=kla_incices-veh_indices
unchanged=veh_indices.intersection(kla_incices)
veh_only=np.array(list(veh_only))
kla_only=np.array(list(kla_only))
unchanged=np.array(list(unchanged))
veh_only_df=motif_position_df.loc[motif_position_df.index.isin(veh_only)]
kla_only_df=motif_position_df.loc[motif_position_df.index.isin(kla_only)]
unchanged_df=motif_position_df.loc[motif_position_df.index.isin(unchanged)]
overall_motif_df=motif_position_df
del overall_motif_df['Factors']
del overall_motif_df['chr']
def co_occur(df):
    '''
    input is a dataframe contains all data of the genomic position of motif in chr1.
    output is a dataframe contains the frequency of co-occurance of every two motifs. 
    '''
    motifs = df.columns.values
    count_frame=np.zeros((df.shape[1],df.shape[1]),dtype=np.int)#a dataframe to store future data
    count_frame=pd.DataFrame(count_frame, columns=motifs)
    count_frame.index=motifs
    col_vector=np.zeros((df.shape[0],1),dtype=np.int) #a column vector use in loop
    for i in range (df.shape[1]):#use the column vector to store each column one by one
        col_vector=df.ix[:,i]!= -1# Find if the motifs exist
        for j in range (df.shape[1]): 
            log_v=df.ix[:,j]!= -1#Find if the motifs exist
            vector_sum = 1*col_vector + 1*log_v
            log_input = vector_sum == 2
            count_input=np.sum(1*log_input)#convert logical ou
            count_frame.ix[i,j]=count_frame.ix[i,j]+count_input
            np.fill_diagonal(count_frame.values, 0)# change diagonal back to zero
    return count_frame
veh_cooccurence_df=co_occur(veh_df)
kla_cooccurence_df=co_occur(kla_df)
overall_cooccurence_df=co_occur(overall_motif_df)
#plot veh co-occurence
veh_cooccurence_plot=[]
for i in range (veh_cooccurence_df.shape[1]-1):
    for j in range (i+1,veh_cooccurence_df.shape[1]):
        veh_cooccurence_plot.append(veh_cooccurence_df.ix[i,j])
sns.distplot(veh_cooccurence_plot)
plt.ylabel('Frequency')
plt.xlabel('co_occurence')
plt.title('veh') 
#plot kla co-occurence
kla_cooccurence_plot=[]
for i in range (kla_cooccurence_df.shape[1]-1):
    for j in range (i+1,kla_cooccurence_df.shape[1]):
        kla_cooccurence_plot.append(kla_cooccurence_df.ix[i,j])
sns.distplot(kla_cooccurence_plot)
plt.ylabel('Frequency')
plt.xlabel('co_occurence')
plt.title('kla') 
#motifpair occurence
def motifpair_occurence(df):
    '''
    input:motfis position dataframe
    outpit:a dataframe countain occurence count of each motif pair.
    '''
    motifs = df.columns.values
    motifs_occurence=sum(df.values!=-1)#occurence count of each motifs
    count_occurence=np.zeros((df.shape[1],df.shape[1]),dtype=np.int)#a dataframe to store future data
    count_occurence=pd.DataFrame(count_occurence, columns=motifs)
    count_occurence.index=motifs
    col_vector=np.zeros((df.shape[0],1),dtype=np.int) #a column vector use in loop
    for i in range (len(motifs_occurence)):#use the column vector to store each column one by one
        for j in range (len(motifs_occurence)): 
            count_input=motifs_occurence[i]*motifs_occurence[j]
            count_occurence.ix[i,j]=count_input
            np.fill_diagonal(count_occurence.values, 1)# change diagonal back to zero
    return count_occurence
#motifpair occurence
def motifpair_occurence(df):
    '''
    input:motfis position dataframe
    outpit:a dataframe countain occurence count of each motif pair.
    '''
    motifs = df.columns.values
    motifs_occurence=sum(df.values!=-1)#occurence count of each motifs
    count_occurence=np.zeros((df.shape[1],df.shape[1]),dtype=np.int)#a dataframe to store future data
    count_occurence=pd.DataFrame(count_occurence, columns=motifs)
    count_occurence.index=motifs
    col_vector=np.zeros((df.shape[0],1),dtype=np.int) #a column vector use in loop
    for i in range (len(motifs_occurence)):#use the column vector to store each column one by one
        for j in range (len(motifs_occurence)): 
            count_input=motifs_occurence[i]*motifs_occurence[j]
            count_occurence.ix[i,j]=count_input
            np.fill_diagonal(count_occurence.values, 1)# change diagonal back to zero
    return count_occurence
#plot veh co-occurence
veh_normalized_cooccurence_plot=[]
for i in range (veh_normalized_cooccurence.shape[1]-1):
    for j in range (i+1,veh_normalized_cooccurence.shape[1]):
        veh_normalized_cooccurence_plot.append(veh_normalized_cooccurence.ix[i,j])
sns.distplot(veh_normalized_cooccurence_plot)
plt.ylabel('Frequency')
plt.xlabel('normalized_occurence')
plt.title('veh') 
#plot kla co-occurence
kla_normalized_cooccurence_plot=[]
for i in range (kla_normalized_cooccurence.shape[1]-1):
    for j in range (i+1,kla_normalized_cooccurence.shape[1]):
        kla_normalized_cooccurence_plot.append(kla_normalized_cooccurence.ix[i,j])
sns.distplot(kla_normalized_cooccurence_plot, bins=50)
plt.ylabel('Frequency')
plt.xlabel('normalized_occurence')
plt.title('kla') 
plt.xlim(0.000019, 0.000022)
def Find_Z(n):
    '''
    For all pairs of motifs - is there a pair that co-occurs more or less often than you would expect.
    input: a dataframe contains frequency of co-occurence of every pair of motifs.
    output:a dataframe contains z score of each pair of motifs.
    '''
    motifs = n.columns.values
    #convert dataframe to matirx
    n=n.as_matrix(columns=None)
    z_matrix = np.zeros((n.shape[0],n.shape[1]-1),dtype=np.float)
    for i in range (n.shape[0]):
        co_motif = n[i,:]
        co_motif = np.delete(co_motif,i)#remove data of the motif co-occur with itself
        z_score=stats.zscore(co_motif)# find z socre 
        z_matrix[i,:]=z_score
    #convert z score matirx to dataframe
    zscore_all=np.zeros((z_matrix.shape[0],z_matrix.shape[0]),dtype=np.float)
    for i in range (z_matrix.shape[0]):
        z_motif_self=z_matrix[i,:]
        z_motif_self=np.insert(z_motif_self,i,100)
        zscore_all[i,:]=z_motif_self
    zscore_frame = pd.DataFrame(zscore_all, columns=motifs)
    zscore_frame.index = motifs
    return zscore_frame
veh_z=Find_Z(veh_cooccurence_df)
kla_z=Find_Z(kla_cooccurence_df)
veh_z_plot=veh_z.values
kla_z_plot=kla_z.values
veh_z_plot=veh_z_plot.flatten()
kla_z_plot=kla_z_plot.flatten()
#plot overall z score
sns.distplot(veh_z_plot[veh_z_plot!=100])
plt.ylabel('Frequency')
plt.xlabel('z score')
plt.title('veh')
plt.show()
sns.distplot(kla_z_plot[kla_z_plot!=100])
plt.ylabel('Frequency')
plt.xlabel('z score')
plt.title('kla')
# z socre of normalized cooccurence
veh_z_normalized=Find_Z(veh_normalized_cooccurence)
kla_z_normalized=Find_Z(kla_normalized_cooccurence)
veh_nz_plot=veh_z_normalized.values
kla_nz_plot=kla_z_normalized.values
veh_nz_plot=veh_nz_plot.flatten()
kla_nz_plot=kla_nz_plot.flatten()
#plot overall z score of normalized cooccurence
sns.distplot(veh_nz_plot[veh_nz_plot!=100])
plt.ylabel('Frequency')
plt.xlabel('z score')
plt.title('veh')
plt.show()
sns.distplot(kla_nz_plot[kla_nz_plot!=100])
plt.ylabel('Frequency')
plt.xlabel('z score')
plt.title('kla')
#find co_occurence_pdf
def Find_pdf(n):
    '''
    For all pairs of motifs - is there a pair that co-occurs more or less often than you would expect.
    input: a matirc contains frequency of co-occurence of every pair of motifs.
    output:an array contains z score of each pair of motifs.
    '''
    motifs = n.columns.values
    #convert dataframe to matirx
    n=n.as_matrix(columns=None)
    p_matrix = np.zeros((n.shape[0],n.shape[1]-1),dtype=np.float)
    for i in range (n.shape[0]):
        #find meand and stv for each motif
        co_motif = n[i,:]
        co_motif = np.delete(co_motif,i)#remove data of the motif co-occur with itself
        mean=np.mean(co_motif)
        std=np.std(co_motif)
        pdf=stats.norm.pdf(co_motif,loc=mean, scale=std)# find z socre 
        p_matrix[i,:]=pdf
    #assign co-occurance pdf of one motif with itself as 100 to make dataframe 
    p_for_dataframe=np.zeros((p_matrix.shape[0],p_matrix.shape[0]),dtype=np.float)
    for i in range (p_matrix.shape[0]):
        p_motif_self=p_matrix[i,:]
        p_motif_self=np.insert(p_motif_self,i,100)
        p_for_dataframe[i,:]=p_motif_self
    p_frame = pd.DataFrame(p_for_dataframe, columns=motifs)
    p_frame.index = motifs
    return p_frame
veh_cooccurence_pdf=Find_pdf(veh_cooccurence_df)*195
kla_cooccurence_pdf=Find_pdf(kla_cooccurence_df)*195
#plot overall pdf
veh_pdf_matrix=veh_cooccurence_pdf.values
kla_pdf_matrix=kla_cooccurence_pdf.values
veh_pdf_plot=veh_pdf_matrix.flatten()
kla_pdf_plot=kla_pdf_matrix.flatten()
sns.distplot(veh_pdf_plot[veh_pdf_plot!=19500])
plt.ylabel('Frequency')
plt.xlabel('pdf')
plt.title('veh')
plt.show()
sns.distplot(kla_pdf_plot[kla_pdf_plot!=19500])
plt.ylabel('Frequency')
plt.xlabel('pdf')
plt.title('kla')
#pdf for normalized co-occurence
veh_cooccurence_npdf=Find_pdf(veh_normalized_cooccurence)*195
kla_cooccurence_npdf=Find_pdf(kla_normalized_cooccurence)*195
#plot overall pdf for normalized co-occurence
veh_npdf_matrix=veh_cooccurence_npdf.values
kla_npdf_matrix=veh_cooccurence_npdf.values
veh_npdf_plot=veh_npdf_matrix.flatten()
kla_npdf_plot=kla_npdf_matrix.flatten()
sns.distplot(veh_npdf_plot[veh_npdf_plot!=19500])
plt.ylabel('Frequency')
plt.xlabel('pdf')
plt.title('veh')
plt.show()
sns.distplot(kla_npdf_plot[kla_npdf_plot!=19500])
plt.ylabel('Frequency')
plt.xlabel('pdf')
plt.title('kla')
def Find_sigpair_via_pdf(df,siglevel):
    motifs = df.columns.values
    threshold = siglevel # threshold of pdf
    significantPairCount = 0
    sigpair=[]
    for i in range(df.shape[0]):
        for j in range(df.shape[0]):
            current_p = df.ix[i][j]
            if current_p <= threshold:
                # display motif pair
                motif1 = motifs[i]
                motif2 = motifs[j]
                sigpair.append((motif1,motif2))
                significantPairCount += 1
    print(significantPairCount)
    return sigpair
kla_sigpairs=Find_sigpair_via_pdf(kla_cooccurence_pdf,0.01)
veh_sigpairs=Find_sigpair_via_pdf(veh_cooccurence_pdf,0.01)
kla_sigpair_frame = pd.DataFrame(kla_sigpairs,columns=['motif1','motif2'])
veh_sigpair_frame = pd.DataFrame(veh_sigpairs,columns=['motif1','motif2'])
#remove repeating sigpair of kla
for i in range (len(kla_sigpair_frame)-1):
    for j in range (i+1,len(kla_sigpair_frame)):
        if kla_sigpair_frame.loc[i]['motif1']==kla_sigpair_frame.loc[j]['motif2'] and kla_sigpair_frame.loc[i]['motif2']==kla_sigpair_frame.loc[j]['motif1']:
            kla_sigpair_frame.loc[j]['motif1']=0
kla_sigpair_frame = kla_sigpair_frame[kla_sigpair_frame['motif1']!=0]
kla_sigpair_frame = kla_sigpair_frame.reset_index(drop=True)
#remove repeating sigpair of veh
for i in range (len(veh_sigpair_frame)-1):
    for j in range (i+1,len(veh_sigpair_frame)):
        if veh_sigpair_frame.loc[i]['motif1']==veh_sigpair_frame.loc[j]['motif2'] and veh_sigpair_frame.loc[i]['motif2']==veh_sigpair_frame.loc[j]['motif1']:
            veh_sigpair_frame.loc[j]['motif1']=0
veh_sigpair_frame = veh_sigpair_frame[veh_sigpair_frame['motif1']!=0]
veh_sigpair_frame = veh_sigpair_frame.reset_index(drop=True)
kla_sigpair_frame.to_csv('/home/shs038/veh_kla/kla_sigpair_frame.tsv', sep='\t')
veh_sigpair_frame.to_csv('/home/shs038/veh_kla/veh_sigpair_frame.tsv', sep='\t')
#find co_occurence hypergeometric pmf
def Find_pmf(position_df,cooccurence_df):
    '''
    For all pairs of motifs - is there a pair that co-occurs more or less often than you would expect.
    input: a matirc contains frequency of co-occurence of every pair of motifs.
    output:an array contains z score of each pair of motifs.
    '''
    motifs = cooccurence_df.columns.values
    Pairs=[]
    p=[]
    All_loci=len(motif_position_df)
    Treatment_loci=len(position_df)
    for i in range (len(cooccurence_df)-1):
        for j in range (i+1,len(cooccurence_df)):
            All_cooccurence=overall_cooccurence_df.ix[i,j]
            Treatment_cooccurence=cooccurence_df.ix[i,j]
            pmf=stats.hypergeom.pmf(Treatment_cooccurence, All_loci, All_cooccurence, Treatment_loci)
            motifpairs=(motifs[i],motifs[j])
            Pairs.append(motifpairs)
            p.append(pmf)
    pmf_frame = pd.DataFrame({'p': p}, index=Pairs)
    return pmf_frame
veh_pmf=Find_pmf(veh_df,veh_cooccurence_df)*195
sns.distplot(veh_pmf['p'], bins=100)
plt.ylabel('Frequency')
plt.xlabel('pmf')
plt.title('veh') 
plt.xlim(-0.1, 0.1)
kla_pmf=Find_pmf(kla_df,kla_cooccurence_df)*195
sns.distplot(kla_pmf['p'])
plt.ylabel('Frequency')
plt.xlabel('pmf')
plt.title('kla') 
#Truth table of veh
veh_truth=1*(abs(veh_z_normalized)>=2.5)
np.fill_diagonal(veh_truth.values, 0)
#Truth table of kla
kla_truth=1*(abs(kla_z_normalized)>=2.5)
np.fill_diagonal(kla_truth.values, 0)
